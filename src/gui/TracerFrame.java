/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import myMqtt.MqttSubscriber;
import myMqtt.MyMqttClient;

/**
 *
 * @author stephan_wink
 */
public class TracerFrame extends javax.swing.JFrame {
    
    private boolean clientConnected_bol = false;
    MyMqttClient client;
    PrintWriter printer = null;

    /**
     * Creates new form TracerFrame
     */
    public TracerFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textDisplay_jtp = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        filter_jb = new javax.swing.JButton();
        select_jb = new javax.swing.JButton();
        log_jtb = new javax.swing.JToggleButton();
        connect_jtb = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textDisplay_jtp.setBackground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(textDisplay_jtp);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        filter_jb.setText("filter");
        filter_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_jbActionPerformed(evt);
            }
        });

        select_jb.setText("select file");
        select_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                select_jbActionPerformed(evt);
            }
        });

        log_jtb.setText("log...");
        log_jtb.setEnabled(false);
        log_jtb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                log_jtbActionPerformed(evt);
            }
        });

        connect_jtb.setText("connect...");
        connect_jtb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect_jtbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filter_jb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(select_jb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(log_jtb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(connect_jtb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(connect_jtb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filter_jb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(select_jb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(log_jtb)
                .addContainerGap(230, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.LINE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connect_jtbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connect_jtbActionPerformed
        if(false == clientConnected_bol)
        {
            clientConnected_bol = true;
            client = MyMqttClient.getInstance();
                client.setAddress("tcp://192.168.178.45:1883");
                client.setIdentifier("macBook_pro");
                client.connectClient();
                
        client.setSubscriber(TracerFrame.this.getMqttErrSubscriberTrace("err/trace/#"));
        client.setSubscriber(TracerFrame.this.getMqttInfoSubscriberTrace("out/trace/#"));
        }
        else
        {
            clientConnected_bol = false;
            client.disconnect();
        }
        
    }//GEN-LAST:event_connect_jtbActionPerformed

    private void filter_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_jbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filter_jbActionPerformed

    private void select_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_select_jbActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                printer = new PrintWriter(new FileWriter(file), true);
            } catch (IOException ex) {
                Logger.getLogger(TracerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(null != printer)
            {
                // logging enabled
                log_jtb.setEnabled(true);
            }
            else
            {
                // logging disabled
                log_jtb.setEnabled(false);
            }           
        } 
        else 
        {
            if(null != printer)
            {
                printer.close();
                printer = null;
            }
            log_jtb.setEnabled(false);          
        }
    }//GEN-LAST:event_select_jbActionPerformed

    private void log_jtbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_log_jtbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_log_jtbActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
 /*       try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TracerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TracerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TracerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TracerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
*/
        /* Create and display the form */
 /*       java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TracerFrame().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JToggleButton connect_jtb;
    public javax.swing.JButton filter_jb;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JToggleButton log_jtb;
    public javax.swing.JButton select_jb;
    public javax.swing.JTextPane textDisplay_jtp;
    // End of variables declaration//GEN-END:variables

    private void SetMessage(String filter, String msg, Color msgColor)
    {
        Date d = new Date();
        SimpleDateFormat sdfmt = new SimpleDateFormat();
        String entryString;
        
        sdfmt.applyPattern( "dd.MM.yyyy hh:mm:ss:SSS" );
                   
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet as = sc.addAttribute(sc.getEmptySet(), 
                StyleConstants.Foreground, msgColor);
        entryString = sdfmt.format(d) +"\t"+ filter + "\t" + msg + "\n";
        Logging(entryString);
        try 
        {
            Document doc = textDisplay_jtp.getDocument();
            doc.insertString(doc.getLength(), entryString, as);
        } catch(BadLocationException e) 
        {
            e.printStackTrace();
        }
    }
    
    public MqttSubscriber getMqttErrSubscriberTrace(String filter) 
    {
        return(new MqttSubscriber(){
            @Override
            public String getFilter() 
            {
                return(filter);
            }

            @Override
            public void notify(String filter, String msg) 
            {
                SetMessage(filter, msg, Color.red);
                
                
            }

            @Override
            public void notify(String msg) 
            {
                SetMessage("unknown filter", msg, Color.red);
            }
        });
    }
    
    public MqttSubscriber getMqttInfoSubscriberTrace(String filter) 
    {
        return(new MqttSubscriber(){
            @Override
            public String getFilter() 
            {
                return(filter);
            }

            @Override
            public void notify(String filter, String msg) 
            {
                SetMessage(filter, msg, Color.green);
                
                
            }

            @Override
            public void notify(String msg) 
            {
                SetMessage("unknown filter", msg, Color.green);
            }
        });
    }

    private void Logging(String entryString) 
    {
        if((null != printer) && log_jtb.isSelected())
        {   
            printer.println(entryString);
            printer.flush();
        }
    }
}
