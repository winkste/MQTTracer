/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import myMqtt.MyMqttClient;

/**
 *
 * @author stephan_wink
 */
public class SequencerFrame extends javax.swing.JFrame {
    
    private boolean running_bol = false;
    private int actualIndexToTable_i = 999;
    private MyMqttClient client;
    private int newIndexToTable_i = 0;

    /**
     * Creates new form SequencerFrame
     */
    public SequencerFrame() 
    {
        initComponents();
        time_jl.setForeground(Color.red);
        new SequencerFrame.DataCollector().execute();
    }
    
    public SequencerFrame(MyMqttClient client) 
    {
        this();
        this.client = client;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        save_jb = new javax.swing.JButton();
        load_jb = new javax.swing.JButton();
        time_jl = new javax.swing.JLabel();
        mode_jtb = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        log_jtp = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_jt = new javax.swing.JTable();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(2, 0));
        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        save_jb.setText("save...");
        save_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_jbActionPerformed(evt);
            }
        });

        load_jb.setText("load...");
        load_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_jbActionPerformed(evt);
            }
        });

        time_jl.setFont(new java.awt.Font("LCD", 1, 36)); // NOI18N
        time_jl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        time_jl.setText("22:00");
        time_jl.setToolTipText("");
        time_jl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mode_jtb.setText("run");
        mode_jtb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mode_jtbActionPerformed(evt);
            }
        });

        log_jtp.setBackground(new java.awt.Color(204, 204, 204));
        log_jtp.setEnabled(false);
        jScrollPane1.setViewportView(log_jtp);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        table_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"00:00", null},
                {"00:15", null},
                {"00:30", null},
                {"00:45", null},
                {"01:00", null},
                {"01:15", null},
                {"01:30", null},
                {"01:45", null},
                {"02:00", null},
                {"02:15", null},
                {"02:30", null},
                {"02:45", null},
                {"03:00", null},
                {"03:15", null},
                {"03:30", null},
                {"03:45", null},
                {"04:00", null},
                {"04:15", null},
                {"04:30", null},
                {"04:45", null},
                {"05:00", null},
                {"05:15", null},
                {"05:30", null},
                {"05:45", null},
                {"06:00", null},
                {"06:15", null},
                {"06:30", null},
                {"06:45", null},
                {"07:00", null},
                {"07:15", "Text;text1;text2;text3"},
                {"07:30", null},
                {"07:45", null},
                {"08:00", null},
                {"08:15", null},
                {"08:30", null},
                {"08:45", null},
                {"09:00", null},
                {"09:15", null},
                {"09:30", null},
                {"09:45", null},
                {"10:00", null},
                {"10:15", null},
                {"10:30", null},
                {"10:45", null},
                {"11:00", null},
                {"11:15", null},
                {"11:30", null},
                {"11:45", null},
                {"12:00", null},
                {"12:15", null},
                {"12:30", null},
                {"12:45", null},
                {"13:00", null},
                {"13:15", null},
                {"13:30", null},
                {"13:45", null},
                {"14:00", null},
                {"14:15", null},
                {"14:30", null},
                {"14:45", null},
                {"15:00", null},
                {"15:15", null},
                {"15:30", null},
                {"15:45", null},
                {"16:00", null},
                {"16:15", null},
                {"16:30", null},
                {"16:45", null},
                {"17:00", null},
                {"17:15", null},
                {"17:30", null},
                {"17:45", null},
                {"18:00", null},
                {"18:15", null},
                {"18:30", null},
                {"18:45", null},
                {"19:00", null},
                {"19:15", null},
                {"19:30", null},
                {"19:45", null},
                {"20:00", null},
                {"20:15", null},
                {"20:30", null},
                {"20:45", null},
                {"21:00", null},
                {"21:15", null},
                {"21:30", null},
                {"21:45", null},
                {"22:00", null},
                {"22:15", null},
                {"22:30", null},
                {"22:45", null},
                {"23:00", null},
                {"23:15", null},
                {"23:30", null},
                {"23:45", null}
            },
            new String [] {
                "Time", "MQTT Msg"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(table_jt);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 140, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(time_jl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(load_jb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(save_jb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mode_jtb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(time_jl, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(load_jb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(save_jb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mode_jtb)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(jPanel2, java.awt.BorderLayout.LINE_END);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void load_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_jbActionPerformed
        loadButtonActionHandler();
    }//GEN-LAST:event_load_jbActionPerformed

    private void save_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_jbActionPerformed
        saveButtonActionHandler();
    }//GEN-LAST:event_save_jbActionPerformed

    private void mode_jtbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mode_jtbActionPerformed
        modeButtonActionHandler();
    }//GEN-LAST:event_mode_jtbActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(null != this.client)
        {
            disconnect();
        }
    }//GEN-LAST:event_formWindowClosing

    private void loadButtonActionHandler()
    {
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();       
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) 
        {
            File file = fc.getSelectedFile();
            // file is existing, read data
             
            try 
            { 
                BufferedReader in = new BufferedReader(new FileReader(file)); 
                String line; 
                int index_i = 0;
                DefaultTableModel model = (DefaultTableModel)table_jt.getModel();
                
                while (((line = in.readLine()) != null) && (index_i != model.getRowCount())) 
                {
                    StringTokenizer lineTokens = new StringTokenizer(line, ",");
                    switch(lineTokens.countTokens())
                    {
                        case 2:
                            lineTokens.nextToken();
                            model.setValueAt(lineTokens.nextToken(), index_i, 1);
                            break;
                        default:
                            model.setValueAt("", index_i, 1);
                            break;
                    }
                    index_i++;
                } 
                in.close();
            }catch (IOException ex) 
            {
                Logger.getLogger(SequencerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }          
        }       
    }
    
    private void saveButtonActionHandler()
    {
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        PrintWriter printer = null;       
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) 
        {
            File file = fc.getSelectedFile();
            try 
            {
                printer = new PrintWriter(new FileWriter(file), true);
            }catch (IOException ex) 
            {
                Logger.getLogger(SequencerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(null != printer)
            {
                int index_i = 0;
                DefaultTableModel model = (DefaultTableModel)table_jt.getModel();
                
                while(index_i != model.getRowCount())
                {
                    String time = (String)model.getValueAt(index_i, 0);
                    String mqttMsg = (String)model.getValueAt(index_i, 1);
                    if(mqttMsg == null)
                        mqttMsg = "";
                    
                    printer.println(time + "," + mqttMsg);
                    printer.flush(); 
                    index_i++;
                }
                printer.close();            
            }          
        } 
    }
    
    private void modeButtonActionHandler()
    {
       if(this.mode_jtb.isSelected())
       {
           actualIndexToTable_i = 999;
           this.running_bol = true;
           this.save_jb.setEnabled(false);
           this.load_jb.setEnabled(false);
           this.table_jt.setEnabled(false);
       }
       else
       {
           this.running_bol = false;
           this.save_jb.setEnabled(true);
           this.load_jb.setEnabled(true);
           this.table_jt.setEnabled(true);
       }
    }

    private void disconnect() 
    {
        
    }

    public void Start() 
    {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SequencerFrame.this.setVisible(true);
            }
        });
    }
    
    class DataCollector extends SwingWorker<Long, Object>
    {

        @Override
        protected Long doInBackground() throws Exception {
            try 
            { 
                Thread.sleep(1000);
            } catch ( InterruptedException e ) { }
            new DataCollector().execute();
            return (0L);
        }
        
        @Override protected void done()
        {
            try
            {
                UpdateTime();
                // if currently running
                if(true == running_bol)
                {
                    
                    newIndexToTable_i = UpdateTableIndex();
                    
                    // table index not equal lastTableIndex
                    if(actualIndexToTable_i != newIndexToTable_i)
                    {
                        // check entry of table
                        actualIndexToTable_i = newIndexToTable_i;
                        DefaultTableModel model = (DefaultTableModel)table_jt.getModel();
                        System.out.println("Index: " + actualIndexToTable_i + ", TimeSlot: " + model.getValueAt(actualIndexToTable_i, 0) + ", MQTT: " + model.getValueAt(actualIndexToTable_i, 1));                   
                        StringTokenizer mqttCmdList_st = new StringTokenizer((String)model.getValueAt(actualIndexToTable_i, 1), ";");
                        while(mqttCmdList_st.hasMoreTokens())
                        {
                            String nextMsg = mqttCmdList_st.nextToken();
                            System.out.println(nextMsg);

                            StringTokenizer msgComplete_st = new StringTokenizer(nextMsg, " ");
                            String msg = "n/a";
                            String payload = "n/a";
                            String error = "";
                            
                            switch (msgComplete_st.countTokens()) 
                            {
                                case 2:
                                    // message + payload
                                    msg = msgComplete_st.nextToken();
                                    payload = msgComplete_st.nextToken();
                                    break;
                                case 1:
                                    // message only
                                    msg = msgComplete_st.nextToken();
                                    payload = "";
                                    break;
                                default:
                                    error = "MSG ERR";
                                    break;
                            }
                              
                            if(null != client && client.isConnected())
                            {
                                client.publish(msg, payload);                               
                            }
                            else
                            {
                                error = "CLIENT ERR";
                            }
                            
                            updateLog(error, msg, payload);
                        }
                    }                   
                }                  
            }
            catch ( /* InterruptedException, ExecutionException */ Exception e ) { }
        }
    }
    
    public int UpdateTableIndex()
    {
        int index_i;
        Calendar rightNow_c = Calendar.getInstance();
        
        // calculate current index entry:
           // actual time per day in secs -> actTime 
           // index time slize in secs -> iSize = 15*60
           // tableIndex = (int)actTime/iSize           
        index_i = (int)((rightNow_c.get(Calendar.HOUR_OF_DAY) * 3600 + 
                                rightNow_c.get(Calendar.MINUTE) * 60 + 
                                rightNow_c.get(Calendar.SECOND)) 
                                / (15 * 60) + 0.5);
        // test time calculation: fast cycle
        //index_i = newIndexToTable_i += 1;
        System.out.println(index_i);
        return(index_i);
    }
    
    public void updateLog(String code, String msg, String payload)
    {
        Date d = new Date();
            
        SimpleDateFormat sdfmt = new SimpleDateFormat();
        sdfmt.applyPattern( "hh.mm" );

        Document doc = log_jtp.getDocument();
        StyleContext sc = StyleContext.getDefaultStyleContext();
        
        Color col = Color.green;
        
        if(!code.equalsIgnoreCase(""))
        {
            col = Color.red;
        }
        AttributeSet as = sc.addAttribute(sc.getEmptySet(), 
        StyleConstants.Foreground, col);
        try 
        {
            doc.insertString(doc.getLength(), sdfmt.format(d) + " -> " + msg + " payload: " + payload + "\n", as);
        }catch (BadLocationException ex) 
        {
            Logger.getLogger(SequencerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void UpdateTime()
    {
        Date d = new Date();
            
        SimpleDateFormat sdfmt = new SimpleDateFormat();
        if(time_jl.getText().contains(":")) sdfmt.applyPattern( "HH.mm" );
        else sdfmt.applyPattern( "HH:mm" );   
        time_jl.setText(sdfmt.format(d));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton load_jb;
    private javax.swing.JTextPane log_jtp;
    private javax.swing.JToggleButton mode_jtb;
    private javax.swing.JButton save_jb;
    private javax.swing.JTable table_jt;
    private javax.swing.JLabel time_jl;
    // End of variables declaration//GEN-END:variables
}
